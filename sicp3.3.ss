(load "debug.ss")

(require scheme/mpair)

(define *show-debug* #t)


;; ex: 3.17
(define (member-pair? e l)
  (cond ((null? l) #f)
        ((eq? (car l) e) #t)
        (else (member-pair? e (cdr l)))))
          
(define count-pairs
  (let ((seen '()))
    (lambda (x)
      (cond ((not (pair? x)) 0)
            ((member-pair? x seen) 0)
            (else (begin
                    (dbg "wtf" x seen)
                    (set! seen (cons x seen))
                    (+ (count-pairs (car x))
                       (count-pairs (cdr x))
                       1)))))))

;; (define x '(a a))
;; (count-pairs (cons (cons x x) '(a a)))

;; ex: 3.18
(define loop?
  (let ((seen '()))
    (lambda (l)
      (cond ((null? l) #f)
            ((member-pair? (car l) seen) #t)
            (else (begin (set! seen (cons (car l) seen))
                         (loop? (cdr l))))))))

;; ex: 3.19
(define (loop? l)
  (define (iter l ll)
    (cond ((or (null? l) (null? ll) (null? (cdr ll))) #f)
          ((eq? (car l) (car ll)) #t)
          ((iter (cdr l) (cdr (cdr ll))))))
  (itel l l))


;; (define (cons x y)
;;   (define (set-x! v) (set! x v))
;;   (define (set-y! v) (set! y v))
;;   (define (dispatch m)
;;     (cond ((eq? m 'car) x)
;;           ((eq? m 'cdr) y)
;;           ((eq? m 'set-car!) set-x!)
;;           ((eq? m 'set-cdr!) set-y!)
;;           (else (error "Undefined operation -- CONS" m))))
;;   dispatch)
;; (define (car z) (z 'car))
;; (define (cdr z) (z 'cdr))
;; (define (set-car! z new-value)
;;   ((z 'set-car!) new-value)
;;   z)
;; (define (set-cdr! z new-value)
;;   ((z 'set-cdr!) new-value)
;;   z)


;; need to use mcons, mcar, mcdr etc, cons for modifiable lists not supported in r6rs
(define (make-queue) (mcons '() '()))
(define (insert-queue! queue item)
  (let ((new-pair (mcons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-mcdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (mcdr (front-ptr queue)))
         queue)))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (mcar (front-ptr queue))))
(define (front-ptr queue) (mcar queue))
(define (rear-ptr queue) (mcdr queue))
(define (set-front-ptr! queue item) (set-mcar! queue item))
(define (set-rear-ptr! queue item) (set-mcdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))

;; ex: 3.21
(define (print-queue queue)
  (display (front-ptr queue))
  (newline))

;; ex: 3.22
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (insert! item)
      (let ((new-pair (mcons item '())))
        (dbg "insert" new-pair)
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               dispatch)
              (else
               (set-mcdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)
               dispatch))))
    (define (delete!)
      (cond ((empty?) (error "delete called on empty queue" dispatch))
            (else (set! front-ptr (mcdr front-ptr))
                  dispatch)))
    (define (front-queue)
      (if (empty?)
          (error "front called on empty queue" dispatch)
          (mcar front-ptr)))
    (define (empty?) (null? front-ptr))
    (define (print) (display front-ptr)(newline))
    (define (dispatch m . item)
      (cond ((eq? m 'insert!) (insert! (car item)))
            ((eq? m 'delete!) (delete!))
            ((eq? m 'front-queue) (front-queue))
            ((eq? m 'print) (print))
      ))
    dispatch))
;; (define q1 (make-queue))
;; (car '(a))
;; (q1 'insert! 'a)
;; (q1 'print)
;; (q1 'insert! 'b)
;; (q1 'print)
;; (q1 'delete!)
;; (q1 'print)


;; ex: 3.23
(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (new-pair item)
      (mcons item (mcons '() '())))
    (define (get-pair-item p)
      (mcar p))
    (define (set-pair-front! p l)
      (set-mcar! (mcdr p) l))
    (define (set-pair-rear! p l)
      (set-mcdr! (mcdr p) l))
    (define (get-pair-front p)
      (mcar (mcdr p)))
    (define (get-pair-rear p)
      (mcdr (mcdr p)))
      
    (define (empty-insert item)
      (set! front-ptr item)
      (set! rear-ptr item)
      dispatch)
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "front called on empty deque" dispatch)
          (get-pair-item front-ptr)))
    (define (rear)
      (if (empty?)
          (error "rear called on empty deque" dispatch)
          (get-pair-item rear-ptr)))
    (define (front-insert! item)
      (let ((nitem (new-pair item)))
        (if (empty?)
            (empty-insert nitem)
            (begin
              (set-pair-rear! nitem front-ptr)
              (set-pair-front! front-ptr nitem)
              (set! front-ptr nitem)
              dispatch))))
    (define (rear-insert! item)
      (let ((nitem (new-pair item)))
        (if (empty?)
            (empty-insert nitem)
            (begin
              (set-pair-front! nitem rear-ptr)
              (set-pair-rear! rear-ptr nitem)
                   (set! rear-ptr nitem)
                   dispatch))))
    (define (front-delete!)
      (if (empty?)
          (error "front-delete called on empty deque" dispatch)
          (begin (set! front-ptr (get-pair-rear front-ptr))
                 (set-pair-front! front-ptr '())
                 dispatch)))
    (define (rear-delete!)
      (if (empty?)
          (error "rear-delete called on empty deque" dispatch)
          (let ((nrear (get-pair-front rear-ptr)))
            (set-pair-rear! nrear '())
            (set! rear-ptr nrear)
            dispatch)))
    (define (print)
      (define (get-list l)
        (if (null? l)
            '()
            (cons (get-pair-item l) (get-list (get-pair-rear l)))))
      (if (empty?)
          (error "print called on empty deque" dispatch)
          (begin (display (get-list front-ptr))
                 (newline))))
    (define (dispatch m . item)
      (cond ((eq? m 'empty-deque?) (empty?))
            ((eq? m 'front-deque) (front))
            ((eq? m 'rear-deque) (rear))
            ((eq? m 'front-insert-deque!) (front-insert! (car item)))
            ((eq? m 'rear-insert-deque!) (rear-insert! (car item)))
            ((eq? m 'front-delete-deque!) (front-delete!))
            ((eq? m 'rear-delete-deque!) (rear-delete!))
            ((eq? m 'print-deque) (print))))
    dispatch))
;; (define d (make-deque))
;; (d 'empty-deque?)
;; (d 'front-insert-deque! 'a)
;; (d 'front-insert-deque! 'b)
;; (d 'rear-deque)
;; (d 'rear-delete-deque!)
;; (d 'print-deque)
;; (d 'rear-insert-deque! 'c)
;; (d 'print-deque)
;; (d 'rear-insert-deque! 'e)
;; (d 'front-delete-deque!)
;; (d 'print-deque)


;; section 3.3.3

;; ex: 3.24
(define (make-table same-key?)
  (define (massoc key records)
    (cond ((null? records) #f)
          ((same-key? key (mcar (mcar records))) (mcar records))
          (else (massoc key (mcdr records)))))
  
  (let ((local-table (mcons '*table* '())))
    (define (lookup key-1 key-2)
      (let ((subtable (massoc key-1 (mcdr local-table))))
        (if subtable
            (let ((record (massoc key-2 (mcdr subtable))))
              (if record
                  (mcdr record)
                  #f))
            #f)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (massoc key-1 (mcdr local-table))))
        (if subtable
            (let ((record (massoc key-2 (mcdr subtable))))
              (if record
                  (set-mcdr! record value)
                  (set-mcdr! subtable
                             (mcons (mcons key-2 value)
                                    (mcdr subtable)))))
            (set-mcdr! local-table
                       (mcons (mcons key-1
                                     (mcons (mcons key-2 value) '()))
                              (mcdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

;; (define (same-key? a b) (eq? a (+ b 1)))
;; (define operation-table (make-table same-key?))
;; (define get (operation-table 'lookup-proc))
;; (define put (operation-table 'insert-proc!))

;; (put '1 '2 10)
;; (get '2 '3)

;; ex: 3.25
(define (make-table)
  (define (massoc key records)
    (cond ((null? records) #f)
          ((equal? key (mcar (mcar records))) (mcar records))
          (else (massoc key (mcdr records)))))

  (let ((local-table (mcons '*table* '())))
    (define (lookup-i table keys)
      (dbg "lookup" table keys)
      (let ((subtable (massoc (car keys) (mcdr table))))
        (cond ((null? (cdr keys))
               (if subtable
                   (mcdr subtable)
                   #f))
              (subtable (lookup-i subtable (cdr keys)))
              (else #f))))
    (define (lookup keys) (lookup-i local-table keys))
    (define (insert-i! table keys value)
      (dbg "insert" table keys value)
      (let ((subtable (massoc (car keys) (mcdr table))))
        (cond ((and (null? (cdr keys)) subtable)
               (set-mcdr! subtable value))     ;insert the new entry
              ((and (null? (cdr keys)) (not subtable))
               (set-mcdr! table (mcons (mcons (car keys) value) (mcdr table))))
              ((not subtable)
               (set-mcdr! table (mcons (mcons (car keys) '()) (mcdr table)))))

        (if (not (null? (cdr keys)))
            (let ((subtable (massoc (car keys) (mcdr table))))
              (insert-i! subtable (cdr keys) value))
            'ok))
      'ok)
    (define (insert! keys value) (insert-i! local-table keys value))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "unknown operation" m))))
    dispatch))


;; ex: 3.25, works even if sub keys have value.
(define (make-table)
  (define (massoc key records)
    (cond ((null? records) #f)
          ((entry-with-key? (mcar records) key) (mcar records))
          (else (massoc key (mcdr records)))))

  ;; basic data element
  (define (entry-create key val list)
    (mcons (mcons key val) list))
  (define (entry-get-list e)
    (mcdr e))
  (define (entry-get-val e)
    (mcdr (mcar e)))
  (define (entry-with-key? e key)
    (equal? key (mcar (mcar e))))
  (define (entry-set-val! e val)
    (set-mcdr! (mcar e) val))
  (define (entry-set-list! e l)
    (set-mcdr! e l))

  (let ((local-table (mcons '*table* '())))
    (define (lookup-i table keys)
      (dbg "lookup" table keys)
      (let ((subtable (massoc (car keys) (mcdr table))))
        (cond ((null? (cdr keys))
               (if subtable
                   (entry-get-val subtable)
                   #f))
              (subtable (lookup-i subtable (cdr keys)))
              (else #f))))
    (define (lookup keys) (lookup-i local-table keys))
    (define (insert-i! table keys value)
      (dbg "insert" table keys value)
      (let ((subtable (massoc (car keys) (mcdr table))))
        (cond ((and (null? (cdr keys)) subtable)
               (entry-set-val! subtable value))     ;insert the new entry
              ((and (null? (cdr keys)) (not subtable))
               (set-mcdr! table (mcons (entry-create (car keys) value '()) (mcdr table))))
              ((not subtable)
               (set-mcdr! table (mcons (entry-create (car keys) '() '()) (mcdr table)))))

        (if (not (null? (cdr keys)))
            (let ((subtable (massoc (car keys) (mcdr table))))
              (insert-i! subtable (cdr keys) value))
            'ok))
      'ok)
    (define (insert! keys value) (insert-i! local-table keys value))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "unknown operation" m))))
    dispatch))


;; (define operation-table (make-table))
;; (define get (operation-table 'lookup-proc))
;; (define put (operation-table 'insert-proc!))

;; (put '(a) 10)
;; (get '(a))
;; (put '(c d) 20)
;; (get '(c d))
;; (put '(e f g) 2)
;; (get '(e f g))
;; (put '(a b) 40)
;; (get '(b))
;; (get '(a b))


;; ex: 3.26
(define (make-table)
  ;; btree
  (define (entry tree) (mcar tree))
  (define (left-branch tree) (mcar (mcdr tree)))
  (define (right-branch tree) (mcar (mcdr (mcdr tree))))
  (define (make-tree entry left right)
    (mcons entry (mcons left (mcons right '()))))
  (define (get-element-with-key key set)
    (cond ((null? set) #f)
          ((entry-eq? key (entry set)) (entry set))
          ((entry-lt? key (entry set))
           (get-element-with-key key (left-branch set)))
          ((entry-gt? key (entry set))
           (get-element-with-key key (right-branch set)))))
  (define (adjoin-set x set ele)
    (cond ((null? set) (make-tree ele '() '()))
          ((entry-eq? x (entry set)) set)
          ((entry-lt? x (entry set))
           (make-tree (entry set)
                      (adjoin-set x (left-branch set))
                      (right-branch set)))
          ((entry-gt? x (entry set))
           (make-tree (entry set)
                      (left-branch set)
                      (adjoin-set x (right-branch set))))))
  ;; end of btree
  
  (define (massoc key records)
    (cond ((null? records) #f)
          ((entry-with-key? (mcar records) key) (mcar records))
          (else (massoc key (mcdr records)))))

  ;; basic data element
  (define (entry-create key val list)
    (mcons (mcons key val) list))
  (define (entry-get-list e)
    (mcdr e))
  (define (entry-get-key e)
    (mcar (mcar e)))
  (define (entry-get-val e)
    (mcdr (mcar e)))
  (define (entry-with-key? e key)
    (equal? key (mcar (mcar e))))
  (define (entry-set-val! e val)
    (set-mcdr! (mcar e) val))
  (define (entry-set-list! e l)
    (set-mcdr! e l))

  (define (entry-eq? key e2)
    (= key (entry-get-key e2)))
  (define (entry-lt? key e2)
    (< key (entry-get-key e2)))
  (define (entry-gt? key e2)
    (> key (entry-get-key e2)))

  ;; btree specific methods
  (define (find key tree)
    (get-element-with-key key tree))
  (define (find-or-create key table)
    (let ((ele (get-element-with-key key (mcdr table))))
      (if ele
          ele
          (let ((nele (entry-create key '() '())))
            (set-mcdr! table
                       (adjoin-set key
                                   (mcdr table)
                                   nele))
            nele))))
  ;; end of btree specific methods
                 
  (let ((local-table (mcons '*table* '())))
    (define (lookup-i table keys)
      (dbg "lookup" table keys)
      (let ((subtable (find (car keys) (mcdr table))))
        (cond ((null? (cdr keys))
               (if subtable
                   (entry-get-val subtable)
                   #f))
              (subtable (lookup-i subtable (cdr keys)))
              (else #f))))
    (define (lookup keys) (lookup-i local-table keys))
    
    (define (insert-i! table keys value)
      (dbg "insert" table keys value)
      (let ((subtable (find-or-create (car keys) table)))
        (if (null? (cdr keys))
            (entry-set-val! subtable value)
            (insert-i! subtable (cdr keys) value))
        'ok))
    (define (insert! keys value) (insert-i! local-table keys value))
    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "unknown operation" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

(put '(1) 10) 
(assert (= (get '(1)) 10))
(put '(1 2) 20)
(assert (= (get '(1 2)) 20))
(put '(1 2 3) 2)
(assert (= (get '(1 2 3)) 2))
(put '(1 2) 40)
(assert (= (get '(1)) 10))
(assert (= (get '(1 2)) 40))




;; more definitions
(define (make-agenda) (list 0))
(define (current-time agenda) (car agenda))
(define (set-current-time! agenda time) (set-car! agenda time))
(define (segments agenda) (cdr agenda))
(define (set-segments! agenda segments) (set-cdr! agenda segments))
(define (first-segment agenda) (car (segments agenda)))
(define (rest-segments agenda) (cdr (segments agenda)))
(define (empty-agenda? agenda) (null? (segments agenda)))

(define (make-wire)
  (define (call-each procedures)
    (if (null? procedures)
        'done
        (begin
          ((car procedures))
          (call-each (cdr procedures)))))
  
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation -- WIRE" m))))
    dispatch))

(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))


(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))

(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propagate))))


(define (probe name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display "  New-value = ")
                 (display (get-signal wire)))))

(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)


;; agenda stuff
(define (make-time-segment time queue) (cons time queue))
(define (segment-time s) (car s))
(define (segment-queue s) (cdr s))

(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
        (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
        (insert-queue! (segment-queue (car segments))
                       action)
        (let ((rest (cdr segments)))
          (if (belongs-before? rest)
              (set-cdr!
               segments
               (cons (make-new-time-segment time action)
                     (cdr segments)))
              (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments!
         agenda
         (cons (make-new-time-segment time action)
               segments))
        (add-to-segments! segments))))

(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (if (empty-queue? q)
        (set-segments! agenda (rest-segments agenda)))))

(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty -- FIRST-AGENDA-ITEM")
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))


;; constraint system
(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- PROBE" request))))
  (connect connector me)
  me)


(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (error "Contradiction" (list value newval)))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant false)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (mmemq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant true false))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error "Unknown operation -- CONNECTOR"
                         request))))
    me))

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))

(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

;; section 3.3.4
(define a (make-wire))
(define b (make-wire))
(define c (make-wire))

(define d (make-wire))
(define e (make-wire))
(define s (make-wire))

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

;; primitive functions
(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)
(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal" s))))
(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
(define (logical-and x y)
  (cond ((and (= x 1) (= y 1)) 1)
        (else 0)))

;; ex: 3.28
(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)
(define (logical-or x y)
  (cond ((and (= x 0) (= y 0)) 0)
        (else 1)))

;; ex: 3.29
(define (or-gate i1 i2 output)
  (let ((a (make-wire)) (b (make-wire)))
    (inverter i1 a)
    (inverter i2 b)
    (and-gate a b output)
    'ok))

;; ex: 3.30
(define (ripple-carry-adder Ak Bk Sk C)
  (let ((c-in (make-wire)))
    (if (null? (cdr Ak))
        (set-signal! c-in 0)
        (ripple-carry-adder (cdr Ak) (cdr Bk) (cdr Sk) c-in))
    (full-adder (car Ak) (car Bk) c-in (car Sk) C)))


;; ex:3.33
(define (naverage a b c)
  (let ((sum (make-connector))
        (mul (make-connector)))
    (adder a b sum)
    (multiplier c mul sum)
    (constant 2 mul)))


((lambda ()
   (define A (make-connector))
   (define B (make-connector))
   (define C (make-connector))
   (naverage A B C)

   ;; (probe "A: " A)
   ;; (probe "B: " B)
   ;; (probe "C: " C)
   
   (set-value! A 10 'user)
   (set-value! B 20 'user)
   (assert (= (get-value C) 15))
   (forget-value! B 'user)
   (set-value! C 15 'user)
   (assert (= (get-value B) 20))))


;; ex: 3.35
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0 -- SQUARER" (get-value b))
            (set-value! a (sqrt (get-value b)) me))
        (if (has-value? a)
            (set-value! b (sqr (get-value a)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- squarer" request))))
  (connect a me)
  (connect b me)
  me)
((lambda ()
   (define A (make-connector))
   (define B (make-connector))
   (squarer A B)

   ;; (probe "A: " A)
   ;; (probe "B: " B)

   (set-value! A 10 'user)
   (assert (= (get-value B) 100))
   (forget-value! A 'user)
   (set-value! B 100 'user)
   (assert (= (get-value A) 10))))
   
;; ex: 3.37
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define (cv x)
  (let ((r (make-connector)))
    (constant x r)
    r))
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
(define (c/ z y)
  (let ((x (make-connector)))
    (multiplier x y z)
    x))

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
(define C (make-connector))
(define F (celsius-fahrenheit-converter C))

